name: Publish Package

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  id-token: write  # Required for npm provenance
  
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
      id-token: write  # Required for npm provenance
      attestations: write  # Required for SLSA attestations
      packages: write  # Required for GitHub Packages
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.12.0
        with:
          disable-sudo: false
          allowed-endpoints: |
            api.github.com:443
            registry.npmjs.org:443
            npm.pkg.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            raw.githubusercontent.com:443
            uploads.github.com:443
            nodejs.org:443
            fulcio.sigstore.dev:443
            rekor.sigstore.dev:443
            tuf-repo-cdn.sigstore.dev:443
            
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Enable corepack and set npm version
        run: |
          corepack enable
          corepack prepare npm@11.6.0 --activate
      
      - run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
      
      - name: Run audit signatures
        run: npm audit signatures
      
      - run: npm run build --if-present
      - run: npm test
      
      - name: Create package tarball and set version
        run: |
          npm pack
          echo "PACKAGE_FILE=$(ls create-codex-*.tgz | head -1)" >> $GITHUB_ENV
          echo "VERSION=$(ls create-codex-*.tgz | head -1 | sed 's/create-codex-\(.*\)\.tgz/\1/')" >> $GITHUB_ENV
        
      - name: Install and verify minisign
        run: |
          # Download minisign with checksum verification
          curl -LO https://github.com/jedisct1/minisign/releases/download/0.12/minisign-0.12-linux.tar.gz
          # Verify against known checksum (minisign doesn't provide .sha256 files, only .minisig signatures)
          echo "9a599b48ba6eb7b1e80f12f36b94ceca7c00b7a5173c95c3efc88d9822957e73  minisign-0.12-linux.tar.gz" | sha256sum -c
          tar xzf minisign-0.12-linux.tar.gz
          sudo mv minisign-linux/x86_64/minisign /usr/local/bin/
          rm -f minisign-0.12-linux.tar.gz
          
      - name: Setup minisign keys
        run: |
          if [ -n "${{ secrets.MINISIGN_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.MINISIGN_PRIVATE_KEY }}" | base64 -d > minisign.key
            chmod 600 minisign.key
          else
            echo "::warning::MINISIGN_PRIVATE_KEY secret not set, skipping minisign signature"
            touch minisign.key.skip
          fi
        
      - name: Sign package with minisign
        run: |
          if [ ! -f minisign.key.skip ]; then
            # Use -W flag to read password from stdin
            echo "${{ secrets.MINISIGN_PASSPHRASE }}" | minisign -Sm "$PACKAGE_FILE" -s minisign.key -W -t "create-codex npm package v$VERSION - $(date -u +%Y-%m-%d)"
            echo "‚úì Successfully signed package with minisign"
          else
            echo "::warning::Skipping minisign signature generation"
          fi
          
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          
      - name: Sign package with GPG
        run: |
          gpg --armor --detach-sign --output "$PACKAGE_FILE.asc" "$PACKAGE_FILE"
          
      - name: Generate SLSA Provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: ${{ env.PACKAGE_FILE }}
          
      - name: Generate SPDX JSON SBOM
        uses: anchore/sbom-action@e11c554f704a0b820cbf8c51673f6945e0731532 # v0.20.0
        with:
          path: .
          format: 'spdx-json'
          output-file: 'create-codex-${{ env.VERSION }}.sbom.spdx.json'
          
      - name: Generate CycloneDX JSON SBOM
        uses: anchore/sbom-action@e11c554f704a0b820cbf8c51673f6945e0731532 # v0.20.0
        with:
          path: .
          format: 'cyclonedx-json'
          output-file: 'create-codex-${{ env.VERSION }}.sbom.cyclonedx.json'
          
      - name: Generate CycloneDX XML SBOM
        uses: anchore/sbom-action@e11c554f704a0b820cbf8c51673f6945e0731532 # v0.20.0
        with:
          path: .
          format: 'cyclonedx-xml'
          output-file: 'create-codex-${{ env.VERSION }}.sbom.cyclonedx.xml'
          
      - name: Generate legacy SPDX with Microsoft tool
        run: |
          # Download and verify Microsoft SBOM tool
          curl -LO https://github.com/microsoft/sbom-tool/releases/download/v4.1.1/sbom-tool-linux-x64
          # Verify against known checksum for v4.1.1
          echo "7bfda808152651c4af8a223697c2219dc762b5dce2e78cbcc024997b6b1f6833  sbom-tool-linux-x64" | sha256sum -c
          chmod +x sbom-tool-linux-x64
          
          # Generate Microsoft SBOM
          ./sbom-tool-linux-x64 generate -b . -bc . -pn create-codex -pv $VERSION -ps RMNCLDYO -nsb https://github.com/RMNCLDYO/create-codex
          mv _manifest/spdx_2.2/manifest.spdx.json "create-codex-$VERSION.ms-spdx.json"
          
          # Cleanup
          rm -rf _manifest sbom-tool-linux-x64
          
      - name: Sign all SBOMs and attestations
        run: |
          # Sign all SBOM files with both minisign and GPG (if keys available)
          for sbom in create-codex-$VERSION.sbom.* create-codex-$VERSION.ms-spdx.json; do
            if [ -f "$sbom" ]; then
              echo "Signing $sbom"
              if [ ! -f minisign.key.skip ]; then
                echo "${{ secrets.MINISIGN_PASSPHRASE }}" | minisign -Sm "$sbom" -s minisign.key -W -t "SBOM for create-codex v$VERSION"
              fi
              gpg --armor --detach-sign --output "$sbom.asc" "$sbom"
            fi
          done
          
          # Note: GitHub attestation files (.intoto.jsonl) are managed internally by GitHub
          # and don't need manual signing as they're already signed via Sigstore
          
      - name: Cleanup sensitive files
        run: |
          rm -f minisign.key minisign.key.skip
          
      - name: Publish with provenance to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Configure npm for GitHub Packages
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: '22'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@rmncldyo'
          
      - name: Publish to GitHub Packages
        run: |
          # Update package name for GitHub Packages (scoped)
          npm pkg set name="@rmncldyo/create-codex"
          
          # Publish to GitHub Packages with provenance
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Restore original package name
        run: |
          # Restore original package name for npm registry
          npm pkg set name="create-codex"
          
      - name: Create comprehensive GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            ## üöÄ Release ${{ github.ref_name }}
            
            **Install from npm:**
            ```bash
            npm install -g create-codex@${{ github.ref_name }}
            ```
            
            **Install from GitHub Packages:**
            ```bash
            npm install -g @rmncldyo/create-codex@${{ github.ref_name }} --registry=https://npm.pkg.github.com
            ```
            
            ## üîê Security & Verification
            
            **Package Signatures:**
            ```bash
            # Download verification keys
            curl -O https://raw.githubusercontent.com/${{ github.repository }}/main/minisign.pub
            
            # Verify minisign signature (recommended)
            minisign -Vm create-codex-${{ github.ref_name }}.tgz -p minisign.pub
            
            # Verify GPG signature
            gpg --verify create-codex-${{ github.ref_name }}.tgz.asc create-codex-${{ github.ref_name }}.tgz
            ```
            
            **Supply Chain Attestations:**
            - ‚úÖ **NPM Provenance**: Package published with Sigstore attestation
            - ‚úÖ **SLSA Build Provenance**: GitHub-generated build attestation  
            - ‚úÖ **Signed SBOMs**: All dependency manifests cryptographically signed
            
            ## üìã Software Bill of Materials (SBOM)
            
            Multiple SBOM formats available for comprehensive dependency analysis:
            
            | Format | File | Signatures |
            |--------|------|------------|
            | **SPDX 2.3** | `create-codex-${{ github.ref_name }}.sbom.spdx.json` | `.minisig`, `.asc` |
            | **CycloneDX** | `create-codex-${{ github.ref_name }}.sbom.cyclonedx.json` | `.minisig`, `.asc` |
            | **CycloneDX XML** | `create-codex-${{ github.ref_name }}.sbom.cyclonedx.xml` | `.minisig`, `.asc` |
            | **Microsoft SPDX** | `create-codex-${{ github.ref_name }}.ms-spdx.json` | `.minisig`, `.asc` |
            
            ## üõ°Ô∏è Security Standards Compliance
            
            - üéØ **OpenSSF Scorecard**: Optimized for maximum security score
            - üèÜ **SLSA Level 3**: Build provenance and hermetic builds  
            - üìä **SSDF Compliant**: Secure software development framework
            - üîç **SBOM Standards**: SPDX 2.3, CycloneDX 1.5+ compatible
            
            ---
            
            **Full Changelog**: [CHANGELOG.md](https://github.com/RMNCLDYO/create-codex/blob/main/CHANGELOG.md)
          files: |
            create-codex-*.tgz
            create-codex-*.tgz.minisig
            create-codex-*.tgz.asc
            create-codex-*.sbom.*
            create-codex-*.ms-spdx.json*